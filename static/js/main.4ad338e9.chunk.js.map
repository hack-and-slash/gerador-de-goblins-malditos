{"version":3,"sources":["data/dados.ts","data/caracteristicas.js","data/tabelaGoblin.ts","data/tabelaDeAtributos.ts","data/nomes.ts","data/tabelaDeEquipamentos.ts","data/equipamentos.ts","gerador.ts","styles/global.ts","styles/styles.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["rolarD6","Random","integer","rolarDadoD6","gerarAnomalias","roll","anomalias","anomaliasTable","reduce","acc","x","concat","Set","filter","elem","gerarCaracteristica","tabelaGoblin","coloracao","ocupacao","comecoDoNome","fimDoNome","tabelaDeAtributos","combate","conhecimento","habilidade","sorte","Vermelho","Verde","Amarelo","Azul","Mercenário","Caçador","Gatuno","Líder","Piromaníaco","Xamã","gerarNomeDoGoblin","equipamentoLeve","equipamentoPesado","tabelaDeEquipamentos","gerarEquipamento","calcularAtributo","atributo","goblinMaldito","caracteristica","goblin","nome","equipamento","createGlobalStyle","Goblin","styled","div","Button","button","App","useState","setarGoblin","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ad338e9.chunk.js","sourcesContent":["import { Random } from 'random-js';\n\nconst rolarD6 = (): number => {\n  const random = new Random();\n\n  return random.integer(0, 5);\n};\n\nconst rolarDadoD6 = (): number => {\n  const random = new Random();\n\n  return random.integer(1, 6);\n};\n\nexport { rolarD6, rolarDadoD6 };\n","import { rolarDadoD6 } from './dados';\n\nfunction anomaliasTable(roll) {\n  switch (roll) {\n    case 3:\n      return 'Manchas rosas';\n    case 4:\n      return 'Orelhas no sovaco';\n    case 5:\n      return 'Corcunda';\n    case 6:\n      return 'Braço extra atrofiado';\n    case 7:\n      return `${rolarDadoD6()} Olhos`;\n    case 8:\n      return 'Olhos Gigantes';\n    case 9:\n      return 'Mãos Gigantes';\n    case 10:\n      return 'Duas Cabeças';\n    case 11:\n    case 12:\n      return [\n        anomaliasTable(rolarDadoD6() + rolarDadoD6()),\n        anomaliasTable(rolarDadoD6() + rolarDadoD6()),\n      ]\n      .reduce((acc, x) => acc.concat(x), []);\n    default:\n      // case 2 ????\n      return '';\n  }\n}\n\nfunction gerarAnomalias(roll) {\n  const anomalias = anomaliasTable(roll);\n  if (typeof anomalias === 'string') {\n    return anomalias === '' ? [] : [anomalias];\n  }\n    return [...new Set(anomalias)].filter((elem) => elem !== '');\n}\n\nfunction gerarCaracteristica(roll) {\n  switch (roll) {\n    case 1:\n      return 'Insano';\n    case 2:\n      return 'Fedorento';\n    case 3:\n      return 'com Cicatrizes';\n    case 4:\n      return 'Gordo';\n    case 5:\n      return 'Fala Errado';\n    case 6:\n      return gerarAnomalias(rolarDadoD6() + rolarDadoD6());\n    default:\n      return '';\n  }\n}\n\nexport default gerarCaracteristica;\n","const tabelaGoblin = {\n  coloracao: ['Verde Claro', 'Verde', 'Verde Escuro', 'Amarelo', 'Vermelho', 'Azul'],\n  ocupacao: ['Mercenário', 'Caçador', 'Gatuno', 'Líder', 'Piromaníaco', 'Xamã'],\n  comecoDoNome: ['Sp', 'Cr', 'Bu', 'Ut', 'An', 'Om'],\n  fimDoNome: ['or', 'ut', 'ar', 'an', 'ot', 'ec'],\n};\n\nexport default tabelaGoblin;\n","const tabelaDeAtributos = {\n  coloracao: {\n    'Verde Claro': {\n      combate: 2,\n      conhecimento: 2,\n      habilidade: 1,\n      sorte: 1,\n    },\n    'Verde Escuro': {\n      combate: 2,\n      conhecimento: 1,\n      habilidade: 2,\n      sorte: 1,\n    },\n    Vermelho: {\n      combate: 1,\n      conhecimento: 2,\n      habilidade: 2,\n      sorte: 1,\n    },\n    Verde: {\n      combate: 2,\n      conhecimento: 1,\n      habilidade: 1,\n      sorte: 2,\n    },\n    Amarelo: {\n      combate: 1,\n      conhecimento: 1,\n      habilidade: 2,\n      sorte: 2,\n    },\n    Azul: {\n      combate: 1,\n      conhecimento: 2,\n      habilidade: 1,\n      sorte: 2,\n    },\n  },\n  ocupacao: {\n    Mercenário: {\n      combate: 1,\n      conhecimento: 0,\n      habilidade: 1,\n      sorte: 0,\n    },\n    Caçador: {\n      combate: 1,\n      conhecimento: 0,\n      habilidade: 0,\n      sorte: 1,\n    },\n    Gatuno: {\n      combate: 0,\n      conhecimento: 1,\n      habilidade: 1,\n      sorte: 0,\n    },\n    Líder: {\n      combate: 1,\n      conhecimento: 1,\n      habilidade: 0,\n      sorte: 0,\n    },\n    Piromaníaco: {\n      combate: 0,\n      conhecimento: 0,\n      habilidade: 1,\n      sorte: 1,\n    },\n    Xamã: {\n      combate: 0,\n      conhecimento: 1,\n      habilidade: 0,\n      sorte: 1,\n    },\n  },\n};\n\nexport default tabelaDeAtributos;\n","import tabelaGoblin from './tabelaGoblin';\nimport { rolarD6 } from './dados';\n\nconst gerarNomeDoGoblin = (): string => {\n  const comecoDoNome = tabelaGoblin.comecoDoNome[rolarD6()];\n  const fimDoNome = tabelaGoblin.fimDoNome[rolarD6()];\n\n  return comecoDoNome + fimDoNome;\n};\n\nexport default gerarNomeDoGoblin;\n","const equipamentoLeve = [\n  '2 Adagas [Pode ser arremeçado]',\n  'Adaga',\n  'Arco Simples',\n  'Arco Composto',\n  '4 Adagas',\n  'Besta e Elmo',\n];\n\nconst equipamentoPesado = [\n  'Espada e Escudo',\n  'Machado e Elmo',\n  '2 Machadinhas [Pode ser arremeçado]',\n  'Espadona',\n  '2 Espadas e Armadura',\n  'Adaga [Pode ser arremeçado], Espada e Armadura',\n];\n\nconst equipamentoExplosivo = [\n  'Pistola e Elmo',\n  '2 Pistolas',\n  '3 Galinhas Explosivas [Dano em todos até 3m]',\n  'Barril de Pólvora [Dano em todos até 3m]',\n  'Pistola e 2 Galinhas Explosivas',\n  'Canhão Carregar [2 turnos]',\n];\n\nconst tabelaDeEquipamentos = {\n  Mercenário: equipamentoPesado,\n  Caçador: equipamentoLeve,\n  Gatuno: equipamentoLeve,\n  Líder: equipamentoPesado,\n  Piromaníaco: equipamentoExplosivo,\n  Xamã: 'Cajado',\n};\n\nexport default tabelaDeEquipamentos;\n","import tabelaDeEquipamentos from './tabelaDeEquipamentos';\nimport { rolarD6 } from './dados';\nimport { Ocupacao } from '../types';\n\nconst gerarEquipamento = (ocupacao: Ocupacao): string => {\n  if (ocupacao === 'Xamã') {\n    return tabelaDeEquipamentos[ocupacao];\n  }\n  return tabelaDeEquipamentos[ocupacao][rolarD6()];\n};\n\nexport default gerarEquipamento;\n","import { rolarD6, rolarDadoD6 } from './data/dados';\nimport gerarCaracteristica from './data/caracteristicas';\nimport tabelaGoblin from './data/tabelaGoblin';\nimport tabelaDeAtributos from './data/tabelaDeAtributos';\nimport gerarNomeDoGoblin from './data/nomes';\nimport gerarEquipamento from './data/equipamentos';\nimport { Atributos, Coloracao, Ocupacao } from './types';\n\nconst calcularAtributo = (coloracao: Coloracao, ocupacao: Ocupacao, atributo: Atributos): number => {\n  const atributoPorColoracao = tabelaDeAtributos.coloracao[coloracao][atributo];\n  const atributoPorOcupacao = tabelaDeAtributos.ocupacao[ocupacao][atributo];\n\n  return atributoPorColoracao + atributoPorOcupacao;\n};\n\ninterface Goblin {\n  nome: string;\n  coloracao: Coloracao;\n  caracteristica: string | string[];\n  ocupacao: Ocupacao;\n  combate: number;\n  conhecimento: number;\n  habilidade: number;\n  sorte: number;\n  equipamento: string;\n}\n\nconst goblinMaldito = (): Goblin => {\n  const coloracao = tabelaGoblin.coloracao[rolarD6()] as Coloracao;\n  const caracteristica = gerarCaracteristica(rolarDadoD6());\n  const ocupacao = tabelaGoblin.ocupacao[rolarD6()] as Ocupacao;\n  const nome = gerarNomeDoGoblin();\n  const combate = calcularAtributo(coloracao, ocupacao, 'combate');\n  const conhecimento = calcularAtributo(coloracao, ocupacao, 'conhecimento');\n  const habilidade = calcularAtributo(coloracao, ocupacao, 'habilidade');\n  const sorte = calcularAtributo(coloracao, ocupacao, 'sorte');\n  const equipamento = gerarEquipamento(ocupacao);\n\n  const goblin = {\n    nome,\n    coloracao,\n    caracteristica,\n    ocupacao,\n    combate,\n    conhecimento,\n    habilidade,\n    sorte,\n    equipamento,\n  };\n\n  return { ...goblin };\n};\n\nexport { rolarD6, gerarEquipamento, gerarNomeDoGoblin, calcularAtributo };\n\nexport default goblinMaldito;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  :root {\n    --primaryColor: #198135;\n    --darkColor: #116527;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: 'Roboto', sans-serif;\n  }\n\n  h1,h2,h3 {\n    font-family: 'Permanent Marker', cursive;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Goblin = styled.div`\n  text-align: center;\n\n  h1 {\n    font-size: 40px;\n    color: var(--primaryColor);\n  }\n`;\n\nexport const Button = styled.button`\n  background-color: var(--primaryColor);\n  color: #fff;\n  padding: 0 10px 3px;\n  border-radius: 5px;\n  cursor: pointer;\n  display: inline-block;\n  transition: background-color 0.3s ease;\n\n  span {\n    margin-left: 5px;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: var(--darkColor);\n  }\n`;\n","import React, { useState } from 'react';\nimport goblinMaldito from './gerador';\nimport GlobalStyle from './styles/global';\nimport { Goblin, Button } from './styles/styles';\n\nfunction App(): JSX.Element {\n  const {\n    nome,\n    coloracao,\n    caracteristica,\n    ocupacao,\n    combate,\n    conhecimento,\n    habilidade,\n    sorte,\n    equipamento,\n  } = goblinMaldito();\n\n  const [, setarGoblin] = useState([]);\n\n  function obterNovoGoblin() {\n    setarGoblin(goblin => [...goblin]);\n  }\n\n  return (\n    <>\n      <Goblin>\n        <h1>Goblin</h1>\n        <h2>{nome}</h2>\n        <p>{`Aparência: ${coloracao} e ${caracteristica}`}</p>\n        <p>{`Ocupação: ${ocupacao}`}</p>\n\n        <h3>Atributos</h3>\n        <p>{`Combate: ${combate}`}</p>\n        <p>{`Conhecimento: ${conhecimento}`}</p>\n        <p>{`Habilidade: ${habilidade}`}</p>\n        <p>{`Sorte: ${sorte}`}</p>\n\n        <h3>Equipamentos</h3>\n        <p>{equipamento}</p>\n\n        <Button type=\"button\" onClick={obterNovoGoblin}>\n          Gerar Novo Goblin\n        </Button>\n      </Goblin>\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}